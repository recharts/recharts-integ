const {execSync} = require('child_process');
const {replacePackageVersion} = require("./replacePackageVersion");
const {tgzFileNameToPackageJsonReference} = require('./tgzFileNameToPackageJsonReference.js');
const path = require("path");
const fs = require("fs");
const {TestResult} = require("./TestResult");

class Controller {
    constructor(absolutePath) {
        this.absolutePath = absolutePath;
    }

    /**
     * This method will clean all autogenerated data and files:
     * node_modules, yarn.lock, package-lock.json, and the like
     */
    clean() {
        /*
         * Clean all autogenerated data and files:
         * node_modules, yarn.lock, package-lock.json, and the like
         */
        fs.rmSync(path.join(this.absolutePath, 'node_modules'), {recursive: true, force: true});
        fs.rmSync(path.join(this.absolutePath, 'package-lock.json'), {force: true});
        fs.rmSync(path.join(this.absolutePath, 'yarn.lock'), {force: true});
        const files = fs.readdirSync(this.absolutePath);
        files.filter(file => file.endsWith('.tgz')).forEach(file => {
            fs.rmSync(path.join(this.absolutePath, file), {force: true});
        });
        return TestResult.ok('clean');
    }

    execSync(cmd) {
        const env = this.getEnv();
        return execSync(cmd, {
            cwd: this.absolutePath, encoding: 'utf-8', env, stdio: ['pipe', 'pipe', 'inherit']
        });
    }

    getEnv() {
        return {
            CI: process.env.CI,
            PATH: process.env.PATH,
            /*
             * Disables the automatic adding of 'packageManager' into every package.json file
             * https://github.com/nodejs/corepack/blob/main/README.md#environment-variables
            */
            COREPACK_ENABLE_AUTO_PIN: 0,
            COREPACK_ENABLE_STRICT: 0
        };
    }

    replacePackageJsonVersion(dependencyName, version) {
        const packageJsonPath = path.join(this.absolutePath, 'package.json');
        return replacePackageVersion(packageJsonPath, dependencyName, version)
    }

    tgzFileNameToPackageJsonReference(tgzFileName) {
        return tgzFileNameToPackageJsonReference(this.absolutePath, tgzFileName);
    }

    /* abstract methods */
    verifySingleDependencyVersion(dependencyName) {
        throw new Error('abstract method verifySingleDependencyVersion');
    }

    install() {
        throw new Error('abstract method install');
    }

    test() {
        throw new Error('abstract method test');
    }

    build() {
        throw new Error('abstract method build');
    }

    pack() {
        throw new Error('abstract method pack');
    }
}

exports.Controller = Controller;